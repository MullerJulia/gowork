// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package users

import (
	"context"
	"github.com/mikenai/gowork/internal/models"
	"sync"
)

// Ensure, that RepositryMock does implement Repositry.
// If this is not the case, regenerate this file with moq.
var _ Repositry = &RepositryMock{}

// RepositryMock is a mock implementation of Repositry.
//
//	func TestSomethingThatUsesRepositry(t *testing.T) {
//
//		// make and configure a mocked Repositry
//		mockedRepositry := &RepositryMock{
//			CreateFunc: func(ctx context.Context, name string, phoneNumber string) (models.User, error) {
//				panic("mock out the Create method")
//			},
//			GetByIDFunc: func(ctx context.Context, id string) (models.User, error) {
//				panic("mock out the GetByID method")
//			},
//			UpdateUserFunc: func(ctx context.Context, user models.User) error {
//				panic("mock out the UpdateUser method")
//			},
//		}
//
//		// use mockedRepositry in code that requires Repositry
//		// and then make assertions.
//
//	}
type RepositryMock struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(ctx context.Context, name string, phoneNumber string) (models.User, error)

	// GetByIDFunc mocks the GetByID method.
	GetByIDFunc func(ctx context.Context, id string) (models.User, error)

	// UpdateUserFunc mocks the UpdateUser method.
	UpdateUserFunc func(ctx context.Context, user models.User) error

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// PhoneNumber is the phoneNumber argument value.
			PhoneNumber string
		}
		// GetByID holds details about calls to the GetByID method.
		GetByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// UpdateUser holds details about calls to the UpdateUser method.
		UpdateUser []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// User is the user argument value.
			User models.User
		}
	}
	lockCreate     sync.RWMutex
	lockGetByID    sync.RWMutex
	lockUpdateUser sync.RWMutex
}

// Create calls CreateFunc.
func (mock *RepositryMock) Create(ctx context.Context, name string, phoneNumber string) (models.User, error) {
	if mock.CreateFunc == nil {
		panic("RepositryMock.CreateFunc: method is nil but Repositry.Create was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Name        string
		PhoneNumber string
	}{
		Ctx:         ctx,
		Name:        name,
		PhoneNumber: phoneNumber,
	}
	mock.lockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	mock.lockCreate.Unlock()
	return mock.CreateFunc(ctx, name, phoneNumber)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//
//	len(mockedRepositry.CreateCalls())
func (mock *RepositryMock) CreateCalls() []struct {
	Ctx         context.Context
	Name        string
	PhoneNumber string
} {
	var calls []struct {
		Ctx         context.Context
		Name        string
		PhoneNumber string
	}
	mock.lockCreate.RLock()
	calls = mock.calls.Create
	mock.lockCreate.RUnlock()
	return calls
}

// GetByID calls GetByIDFunc.
func (mock *RepositryMock) GetByID(ctx context.Context, id string) (models.User, error) {
	if mock.GetByIDFunc == nil {
		panic("RepositryMock.GetByIDFunc: method is nil but Repositry.GetByID was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetByID.Lock()
	mock.calls.GetByID = append(mock.calls.GetByID, callInfo)
	mock.lockGetByID.Unlock()
	return mock.GetByIDFunc(ctx, id)
}

// GetByIDCalls gets all the calls that were made to GetByID.
// Check the length with:
//
//	len(mockedRepositry.GetByIDCalls())
func (mock *RepositryMock) GetByIDCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockGetByID.RLock()
	calls = mock.calls.GetByID
	mock.lockGetByID.RUnlock()
	return calls
}

// UpdateUser calls UpdateUserFunc.
func (mock *RepositryMock) UpdateUser(ctx context.Context, user models.User) error {
	if mock.UpdateUserFunc == nil {
		panic("RepositryMock.UpdateUserFunc: method is nil but Repositry.UpdateUser was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		User models.User
	}{
		Ctx:  ctx,
		User: user,
	}
	mock.lockUpdateUser.Lock()
	mock.calls.UpdateUser = append(mock.calls.UpdateUser, callInfo)
	mock.lockUpdateUser.Unlock()
	return mock.UpdateUserFunc(ctx, user)
}

// UpdateUserCalls gets all the calls that were made to UpdateUser.
// Check the length with:
//
//	len(mockedRepositry.UpdateUserCalls())
func (mock *RepositryMock) UpdateUserCalls() []struct {
	Ctx  context.Context
	User models.User
} {
	var calls []struct {
		Ctx  context.Context
		User models.User
	}
	mock.lockUpdateUser.RLock()
	calls = mock.calls.UpdateUser
	mock.lockUpdateUser.RUnlock()
	return calls
}
